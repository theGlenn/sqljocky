{"dependencies":[{"id":"dart.core","uri":"dart-sdk/lib/core/core.dart","name":"dart:core","children":[{"id":"Object","comment":"\nEverything in Dart is an [Object].\n","uri":"dart-sdk/lib/core/object.dart","name":"Object","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"id":"==1()","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","name":"==","children":[{"id":"other","name":"other","kind":"param"}],"line":"29","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"id":"toString0()","comment":"\nReturns a string representation of this object.\n","name":"toString","line":"48","kind":"method"},{"id":"noSuchMethod1()","comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","name":"noSuchMethod","children":[{"ref":{"refId":"dart.core/Invocation","name":"Invocation"},"id":"invocation","name":"invocation","kind":"param"}],"line":"60","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"hashCode","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","name":"hashCode","line":"43","kind":"property"},{"ref":{"refId":"dart.core/Type","name":"Type"},"id":"runtimeType","comment":"\nA representation of the runtime type of the object.\n","name":"runtimeType","line":"65","kind":"property"},{"id":"0()","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","name":"","line":"18","kind":"constructor"}],"line":"10","kind":"class"}],"line":"5","kind":"library"}],"id":"list_writer","uri":"file:///home/james/devroot/sqljocky/lib/src/list_writer.dart","children":[{"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"ListWriter","comment":"\nThis provides methods to read and write strings, lists and\nvarious sized integers on a buffer (implemented as an integer list).\n\nThe ints in the backing list must all be 8-bit values. If larger values are\nentered, behaviour is undefined.\n\nAs per mysql spec, numbers here are all unsigned.\nWhich makes things much easier.\n","name":"ListWriter","children":[{"returnType":{"refId":"dart.core/int","name":"int"},"id":"writeToSocket3()","comment":"\nWrites up to [count] bytes to the [socket] from the buffer.\nReturns the number of bytes written.\n","name":"writeToSocket","children":[{"ref":{"refId":"dart.io/RawSocket","name":"RawSocket"},"id":"socket","name":"socket","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"start","name":"start","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"count","name":"count","kind":"param"}],"line":"34","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"add1()","comment":"\nAdds the [value] to the list;\n","name":"add","children":[{"id":"value","name":"value","kind":"param"}],"line":"41","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"fill2()","comment":"\nFills the next [numberOfBytes] with the given [value]\n","name":"fill","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"numberOfBytes","name":"numberOfBytes","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"value","name":"value","kind":"param"}],"line":"53","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"writeNullTerminatedList1()","comment":"\nWrites a null terminated list of ints from the buffer. The given [list]\nshould not contain the terminating zero.\n","name":"writeNullTerminatedList","children":[{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"id":"list","name":"list","kind":"param"}],"line":"64","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"writeLengthCodedBinary1()","comment":"\nWill write a length coded binary value, once implemented!\n","name":"writeLengthCodedBinary","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"value","name":"value","kind":"param"}],"line":"72","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"writeByte1()","comment":"\nWrites a single [byte] to the buffer.\n","name":"writeByte","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"byte","name":"byte","kind":"param"}],"line":"96","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"_writeUint161()","comment":"\nWrites a 16 bit [integer] to the buffer.\n","name":"_writeUint16","isPrivate":true,"children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"integer","name":"integer","kind":"param"}],"line":"103","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"_writeUint241()","comment":"\nWrites a 24 bit [integer] to the buffer.\n","name":"_writeUint24","isPrivate":true,"children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"integer","name":"integer","kind":"param"}],"line":"111","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"_writeUint321()","comment":"\nWrites a 32 bit [integer] to the buffer.\n","name":"_writeUint32","isPrivate":true,"children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"integer","name":"integer","kind":"param"}],"line":"120","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"_writeUint641()","comment":"\nWrites a 64 bit [integer] to the buffer.\n","name":"_writeUint64","isPrivate":true,"children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"integer","name":"integer","kind":"param"}],"line":"130","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"writeList1()","comment":"\nWrites the give [list] of bytes to the buffer.\n","name":"writeList","children":[{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"id":"list","name":"list","kind":"param"}],"line":"144","kind":"method"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"id":"list","name":"list","line":"22","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"length","comment":"\nReturns the size of the buffer\n","name":"length","line":"48","kind":"property"},{"ref":{"refId":"logging/Logger","name":"Logger"},"isFinal":true,"id":"log","name":"log","line":"18","kind":"variable"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"isFinal":true,"id":"_list","name":"_list","isPrivate":true,"line":"20","kind":"variable"},{"id":"1()","comment":"\nCreates a [ListWriter] with the given [list] as backing storage\n","name":"","children":[{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"id":"list","name":"list","kind":"param"}],"line":"27","kind":"constructor"}],"line":"17","kind":"class"}],"line":"1","kind":"library"}
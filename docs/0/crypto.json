{"dependencies":[{"id":"dart.core","uri":"dart-sdk/lib/core/core.dart","name":"dart:core","children":[{"id":"Object","comment":"\nEverything in Dart is an [Object].\n","uri":"dart-sdk/lib/core/object.dart","name":"Object","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"id":"==1()","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","name":"==","children":[{"id":"other","name":"other","kind":"param"}],"line":"29","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"id":"toString0()","comment":"\nReturns a string representation of this object.\n","name":"toString","line":"48","kind":"method"},{"id":"noSuchMethod1()","comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","name":"noSuchMethod","children":[{"ref":{"refId":"dart.core/Invocation","name":"Invocation"},"id":"invocation","name":"invocation","kind":"param"}],"line":"60","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"hashCode","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","name":"hashCode","line":"43","kind":"property"},{"ref":{"refId":"dart.core/Type","name":"Type"},"id":"runtimeType","comment":"\nA representation of the runtime type of the object.\n","name":"runtimeType","line":"65","kind":"property"},{"id":"0()","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","name":"","line":"18","kind":"constructor"}],"line":"10","kind":"class"}],"line":"5","kind":"library"}],"id":"crypto","uri":"package:crypto/crypto.dart","name":"package:crypto/crypto.dart","children":[{"returnType":{"refId":"dart.core/int","name":"int"},"id":"_rotl322()","uri":"package:crypto/src/hash_utils.dart","name":"_rotl32","isPrivate":true,"children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"val","name":"val","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"shift","name":"shift","kind":"param"}],"line":"16","kind":"method"},{"id":"_BYTES_PER_WORD","uri":"package:crypto/src/hash_utils.dart","name":"_BYTES_PER_WORD","isPrivate":true,"line":"11","kind":"variable"},{"id":"_BITS_PER_BYTE","uri":"package:crypto/src/hash_utils.dart","name":"_BITS_PER_BYTE","isPrivate":true,"line":"10","kind":"variable"},{"id":"_MASK_32","uri":"package:crypto/src/hash_utils.dart","name":"_MASK_32","isPrivate":true,"line":"9","kind":"variable"},{"id":"_MASK_8","uri":"package:crypto/src/hash_utils.dart","name":"_MASK_8","isPrivate":true,"line":"8","kind":"variable"},{"superclass":{"refId":"crypto/_HashBase","name":"_HashBase"},"id":"SHA256","comment":"\nSHA256 hash function implementation.\n","uri":"package:crypto/src/sha256.dart","name":"SHA256","children":[{"returnType":{"refId":"crypto/SHA256","name":"SHA256"},"id":"newInstance0()","name":"newInstance","line":"26","kind":"method"},{"id":"_rotr322()","name":"_rotr32","isPrivate":true,"children":[{"id":"n","name":"n","kind":"param"},{"id":"x","name":"x","kind":"param"}],"line":"48","kind":"method"},{"id":"_ch3()","name":"_ch","isPrivate":true,"children":[{"id":"x","name":"x","kind":"param"},{"id":"y","name":"y","kind":"param"},{"id":"z","name":"z","kind":"param"}],"line":"49","kind":"method"},{"id":"_maj3()","name":"_maj","isPrivate":true,"children":[{"id":"x","name":"x","kind":"param"},{"id":"y","name":"y","kind":"param"},{"id":"z","name":"z","kind":"param"}],"line":"50","kind":"method"},{"id":"_bsig01()","name":"_bsig0","isPrivate":true,"children":[{"id":"x","name":"x","kind":"param"}],"line":"51","kind":"method"},{"id":"_bsig11()","name":"_bsig1","isPrivate":true,"children":[{"id":"x","name":"x","kind":"param"}],"line":"52","kind":"method"},{"id":"_ssig01()","name":"_ssig0","isPrivate":true,"children":[{"id":"x","name":"x","kind":"param"}],"line":"53","kind":"method"},{"id":"_ssig11()","name":"_ssig1","isPrivate":true,"children":[{"id":"x","name":"x","kind":"param"}],"line":"54","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"_updateHash1()","name":"_updateHash","isPrivate":true,"children":[{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"id":"M","name":"M","kind":"param"}],"line":"58","kind":"method"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"isStatic":true,"id":"_K","name":"_K","isPrivate":true,"line":"32","kind":"variable"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"id":"_w","name":"_w","isPrivate":true,"line":"106","kind":"variable"},{"id":"0()","name":"","line":"12","kind":"constructor"}],"line":"10","kind":"class"},{"superclass":{"refId":"crypto/_HashBase","name":"_HashBase"},"id":"SHA1","comment":"\nSHA1 hash function implementation.\n","uri":"package:crypto/src/sha1.dart","name":"SHA1","children":[{"returnType":{"refId":"crypto/SHA1","name":"SHA1"},"id":"newInstance0()","name":"newInstance","line":"21","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"_updateHash1()","name":"_updateHash","isPrivate":true,"children":[{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"id":"m","name":"m","kind":"param"}],"line":"27","kind":"method"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"id":"_w","name":"_w","isPrivate":true,"line":"68","kind":"variable"},{"id":"0()","name":"","line":"12","kind":"constructor"}],"line":"10","kind":"class"},{"superclass":{"refId":"crypto/_HashBase","name":"_HashBase"},"id":"MD5","comment":"\nMD5 hash function implementation.\n\nWARNING: MD5 has known collisions and should only be used when\nrequired for backwards compatibility.\n","uri":"package:crypto/src/md5.dart","name":"MD5","children":[{"returnType":{"refId":"crypto/MD5","name":"MD5"},"id":"newInstance0()","name":"newInstance","line":"22","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"_updateHash1()","name":"_updateHash","isPrivate":true,"children":[{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"id":"m","name":"m","kind":"param"}],"line":"47","kind":"method"},{"isStatic":true,"id":"_k","name":"_k","isPrivate":true,"line":"26","kind":"variable"},{"isStatic":true,"id":"_r","name":"_r","isPrivate":true,"line":"39","kind":"variable"},{"id":"0()","name":"","line":"14","kind":"constructor"}],"line":"13","kind":"class"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"HMAC","comment":"\nHash-based Message Authentication Code support.\n\nThe [add] method is used to add data to the message. The [digest] and\n[close] methods are used to extract the message authentication code.\n","uri":"package:crypto/src/hmac.dart","name":"HMAC","children":[{"id":"add1()","comment":"\nAdd a list of bytes to the message.\n","name":"add","children":[{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"id":"data","name":"data","kind":"param"}],"line":"25","kind":"method"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"id":"close0()","comment":"\nPerform the actual computation and extract the message digest\nas a list of bytes.\n","name":"close","line":"81","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"verify1()","comment":"\nVerify that the HMAC computed for the data so far matches the\ngiven message digest.\n\nThis method should be used instead of memcmp-style comparisons\nto avoid leaking information via timing.\n\nThrows an exception if the given digest does not have the same\nsize as the digest computed by this HMAC instance.\n","name":"verify","children":[{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"id":"digest","name":"digest","kind":"param"}],"line":"96","kind":"method"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"id":"digest","comment":"\nExtract the message digest as a list of bytes without closing [this].\n","name":"digest","line":"33","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"id":"_isClosed","name":"_isClosed","isPrivate":true,"line":"15","kind":"variable"},{"ref":{"refId":"crypto/Hash","name":"Hash"},"id":"_hash","name":"_hash","isPrivate":true,"line":"111","kind":"variable"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"id":"_key","name":"_key","isPrivate":true,"line":"112","kind":"variable"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"id":"_message","name":"_message","isPrivate":true,"line":"113","kind":"variable"},{"id":"2()","comment":"\nCreate an [HMAC] object from a [Hash] and a key.\n","name":"","children":[{"initializedField":{"refId":"crypto/HMAC/_hash","name":"_hash"},"ref":{"refId":"crypto/Hash","name":"Hash"},"id":"_hash","name":"_hash","isPrivate":true,"kind":"param"},{"initializedField":{"refId":"crypto/HMAC/_key","name":"_key"},"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"id":"_key","name":"_key","isPrivate":true,"kind":"param"}],"line":"20","kind":"constructor"}],"line":"14","kind":"class"},{"isAbstract":true,"interfaces":[{"refId":"crypto/Hash","name":"Hash"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"_HashBase","uri":"package:crypto/src/hash_utils.dart","name":"_HashBase","isPrivate":true,"children":[{"id":"add1()","name":"add","children":[{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"id":"data","name":"data","kind":"param"}],"line":"34","kind":"method"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"id":"close0()","name":"close","line":"45","kind":"method"},{"id":"newInstance0()","name":"newInstance","line":"62","kind":"method"},{"id":"_updateHash1()","name":"_updateHash","isPrivate":true,"children":[{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"id":"m","name":"m","kind":"param"}],"line":"65","kind":"method"},{"id":"_add322()","name":"_add32","isPrivate":true,"children":[{"id":"x","name":"x","kind":"param"},{"id":"y","name":"y","kind":"param"}],"line":"68","kind":"method"},{"id":"_roundUp2()","name":"_roundUp","isPrivate":true,"children":[{"id":"val","name":"val","kind":"param"},{"id":"n","name":"n","kind":"param"}],"line":"69","kind":"method"},{"id":"_resultAsBytes0()","name":"_resultAsBytes","isPrivate":true,"line":"72","kind":"method"},{"id":"_bytesToChunk2()","name":"_bytesToChunk","isPrivate":true,"children":[{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"id":"data","name":"data","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"dataIndex","name":"dataIndex","kind":"param"}],"line":"81","kind":"method"},{"id":"_wordToBytes1()","name":"_wordToBytes","isPrivate":true,"children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"word","name":"word","kind":"param"}],"line":"99","kind":"method"},{"id":"_iterate0()","name":"_iterate","isPrivate":true,"line":"110","kind":"method"},{"id":"_finalizeData0()","name":"_finalizeData","isPrivate":true,"line":"125","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"blockSize","name":"blockSize","line":"57","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"isFinal":true,"id":"_chunkSizeInWords","name":"_chunkSizeInWords","isPrivate":true,"line":"146","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isFinal":true,"id":"_digestSizeInWords","name":"_digestSizeInWords","isPrivate":true,"line":"147","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"isFinal":true,"id":"_bigEndianWords","name":"_bigEndianWords","isPrivate":true,"line":"148","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"_lengthInBytes","name":"_lengthInBytes","isPrivate":true,"line":"149","kind":"variable"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"id":"_pendingData","name":"_pendingData","isPrivate":true,"line":"150","kind":"variable"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"id":"_currentChunk","name":"_currentChunk","isPrivate":true,"line":"151","kind":"variable"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"id":"_h","name":"_h","isPrivate":true,"line":"152","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"id":"_digestCalled","name":"_digestCalled","isPrivate":true,"line":"153","kind":"variable"},{"id":"3()","name":"","children":[{"initializedField":{"refId":"crypto/_HashBase/_chunkSizeInWords","name":"_chunkSizeInWords"},"ref":{"refId":"dart.core/int","name":"int"},"id":"_chunkSizeInWords","name":"_chunkSizeInWords","isPrivate":true,"kind":"param"},{"initializedField":{"refId":"crypto/_HashBase/_digestSizeInWords","name":"_digestSizeInWords"},"ref":{"refId":"dart.core/int","name":"int"},"id":"_digestSizeInWords","name":"_digestSizeInWords","isPrivate":true,"line":"26","kind":"param"},{"initializedField":{"refId":"crypto/_HashBase/_bigEndianWords","name":"_bigEndianWords"},"ref":{"refId":"dart.core/bool","name":"bool"},"id":"_bigEndianWords","name":"_bigEndianWords","isPrivate":true,"line":"27","kind":"param"}],"line":"25","kind":"constructor"}],"line":"24","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"_CryptoUtils","uri":"package:crypto/src/crypto_utils.dart","name":"_CryptoUtils","isPrivate":true,"children":[{"returnType":{"refId":"dart.core/String","name":"String"},"isStatic":true,"id":"bytesToHex1()","name":"bytesToHex","children":[{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"id":"bytes","name":"bytes","kind":"param"}],"line":"8","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"isStatic":true,"id":"bytesToBase643()","name":"bytesToBase64","children":[{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"id":"bytes","name":"bytes","kind":"param"},{"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"false","id":"urlSafe","name":"urlSafe","line":"51","kind":"param"},{"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"false","id":"addLineSeparator","name":"addLineSeparator","line":"52","kind":"param"}],"line":"50","kind":"method"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"isStatic":true,"id":"base64StringToBytes1()","name":"base64StringToBytes","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"input","name":"input","kind":"param"}],"line":"107","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"id":"PAD","name":"PAD","line":"16","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"id":"CR","name":"CR","line":"17","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"id":"LF","name":"LF","line":"18","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"id":"LINE_LENGTH","name":"LINE_LENGTH","line":"19","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isStatic":true,"id":"_encodeTable","name":"_encodeTable","isPrivate":true,"line":"21","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isStatic":true,"id":"_encodeTableUrlSafe","name":"_encodeTableUrlSafe","isPrivate":true,"line":"24","kind":"variable"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"isStatic":true,"id":"_decodeTable","name":"_decodeTable","isPrivate":true,"line":"32","kind":"variable"}],"line":"7","kind":"class"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"CryptoUtils","comment":"\nUtility methods for working with message digests.\n","name":"CryptoUtils","children":[{"returnType":{"refId":"dart.core/String","name":"String"},"isStatic":true,"id":"bytesToHex1()","comment":"\nConvert a list of bytes (for example a message digest) into a hex\nstring.\n","name":"bytesToHex","children":[{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"id":"bytes","name":"bytes","kind":"param"}],"line":"64","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"isStatic":true,"id":"bytesToBase643()","comment":"\nConverts a list of bytes into a Base 64 encoded string.\n\nThe list can be any list of integers in the range 0..255,\nfor example a message digest.\n\nIf [addLineSeparator] is true, the resulting string will  be\nbroken into lines of 76 characters, separated by \"\\r\\n\".\n\nIf [urlSafe] is true, the result is URL and filename safe.\n\nBased on [RFC 4648](http://tools.ietf.org/html/rfc4648)\n\n","name":"bytesToBase64","children":[{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"id":"bytes","name":"bytes","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"false","id":"urlSafe","name":"urlSafe","line":"83","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"false","id":"addLineSeparator","name":"addLineSeparator","line":"84","kind":"param"}],"line":"82","kind":"method"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"isStatic":true,"id":"base64StringToBytes1()","comment":"\nConverts a Base 64 encoded String into list of bytes.\n\nDecoder ignores \"\\r\\n\" sequences from input.\n\nAccepts both URL safe and unsafe Base 64 encoded strings.\n\nThrows a FormatException exception if input contains invalid characters.\n\nBased on [RFC 4648](http://tools.ietf.org/html/rfc4648)\n","name":"base64StringToBytes","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"input","name":"input","kind":"param"}],"line":"102","kind":"method"}],"line":"59","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"Hash","comment":"\nInterface for cryptographic hash functions.\n\nThe [add] method is used to add data to the hash. The [close] method\nis used to extract the message digest.\n\nOnce the [close] method has been called no more data can be added using the\n[add] method. If [add] is called after the first call to [close] a\nHashException is thrown.\n\nIf multiple instances of a given Hash is needed the [newInstance]\nmethod can provide a new instance.\n","name":"Hash","children":[{"id":"add1()","comment":"\nAdd a list of bytes to the hash computation.\n","name":"add","children":[{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"id":"data","name":"data","kind":"param"}],"line":"34","kind":"method"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"id":"close0()","comment":"\nFinish the hash computation and extract the message digest as\na list of bytes.\n","name":"close","line":"40","kind":"method"},{"returnType":{"refId":"crypto/Hash","name":"Hash"},"id":"newInstance0()","comment":"\nReturns a new instance of this hash function.\n","name":"newInstance","line":"45","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"blockSize","comment":"\nInternal block size of the hash in bytes.\n\nThis is exposed for use by the HMAC class which needs to know the\nblock size for the [Hash] it is using.\n","name":"blockSize","line":"53","kind":"property"}],"line":"30","kind":"class"}],"line":"5","kind":"library"}